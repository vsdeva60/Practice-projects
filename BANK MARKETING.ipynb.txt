{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "004a03c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ac37c370",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train = pd.read_csv(\"termdeposit_train.csv\")\n",
    "df_test = pd.read_csv(\"termdeposit_test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9366cf64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>subscribed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26110</td>\n",
       "      <td>56</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>1933</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>19</td>\n",
       "      <td>nov</td>\n",
       "      <td>44</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>40576</td>\n",
       "      <td>31</td>\n",
       "      <td>unknown</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>20</td>\n",
       "      <td>jul</td>\n",
       "      <td>91</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15320</td>\n",
       "      <td>27</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>891</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>18</td>\n",
       "      <td>jul</td>\n",
       "      <td>240</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>43962</td>\n",
       "      <td>57</td>\n",
       "      <td>management</td>\n",
       "      <td>divorced</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>3287</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>22</td>\n",
       "      <td>jun</td>\n",
       "      <td>867</td>\n",
       "      <td>1</td>\n",
       "      <td>84</td>\n",
       "      <td>3</td>\n",
       "      <td>success</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29842</td>\n",
       "      <td>31</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>119</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>4</td>\n",
       "      <td>feb</td>\n",
       "      <td>380</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      ID  age         job   marital  education default  balance housing loan  \\\n",
       "0  26110   56      admin.   married    unknown      no     1933      no   no   \n",
       "1  40576   31     unknown   married  secondary      no        3      no   no   \n",
       "2  15320   27    services   married  secondary      no      891     yes   no   \n",
       "3  43962   57  management  divorced   tertiary      no     3287      no   no   \n",
       "4  29842   31  technician   married  secondary      no      119     yes   no   \n",
       "\n",
       "     contact  day month  duration  campaign  pdays  previous poutcome  \\\n",
       "0  telephone   19   nov        44         2     -1         0  unknown   \n",
       "1   cellular   20   jul        91         2     -1         0  unknown   \n",
       "2   cellular   18   jul       240         1     -1         0  unknown   \n",
       "3   cellular   22   jun       867         1     84         3  success   \n",
       "4   cellular    4   feb       380         1     -1         0  unknown   \n",
       "\n",
       "  subscribed  \n",
       "0         no  \n",
       "1         no  \n",
       "2         no  \n",
       "3        yes  \n",
       "4         no  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8657c8ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38441</td>\n",
       "      <td>32</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>118</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>15</td>\n",
       "      <td>may</td>\n",
       "      <td>20</td>\n",
       "      <td>6</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>40403</td>\n",
       "      <td>78</td>\n",
       "      <td>retired</td>\n",
       "      <td>divorced</td>\n",
       "      <td>primary</td>\n",
       "      <td>no</td>\n",
       "      <td>2787</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>1</td>\n",
       "      <td>jul</td>\n",
       "      <td>372</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3709</td>\n",
       "      <td>31</td>\n",
       "      <td>self-employed</td>\n",
       "      <td>single</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>144</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>16</td>\n",
       "      <td>may</td>\n",
       "      <td>676</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37422</td>\n",
       "      <td>57</td>\n",
       "      <td>services</td>\n",
       "      <td>single</td>\n",
       "      <td>primary</td>\n",
       "      <td>no</td>\n",
       "      <td>3777</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>13</td>\n",
       "      <td>may</td>\n",
       "      <td>65</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12527</td>\n",
       "      <td>45</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>divorced</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>-705</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>unknown</td>\n",
       "      <td>3</td>\n",
       "      <td>jul</td>\n",
       "      <td>111</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      ID  age            job   marital  education default  balance housing  \\\n",
       "0  38441   32       services   married  secondary      no      118     yes   \n",
       "1  40403   78        retired  divorced    primary      no     2787      no   \n",
       "2   3709   31  self-employed    single   tertiary      no      144     yes   \n",
       "3  37422   57       services    single    primary      no     3777     yes   \n",
       "4  12527   45    blue-collar  divorced  secondary      no     -705      no   \n",
       "\n",
       "  loan    contact  day month  duration  campaign  pdays  previous poutcome  \n",
       "0   no   cellular   15   may        20         6     -1         0  unknown  \n",
       "1   no  telephone    1   jul       372         1     -1         0  unknown  \n",
       "2   no    unknown   16   may       676         1     -1         0  unknown  \n",
       "3   no  telephone   13   may        65         2     -1         0  unknown  \n",
       "4  yes    unknown    3   jul       111         1     -1         0  unknown  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2736a042",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ID', 'age', 'job', 'marital', 'education', 'default', 'balance',\n",
       "       'housing', 'loan', 'contact', 'day', 'month', 'duration', 'campaign',\n",
       "       'pdays', 'previous', 'poutcome', 'subscribed'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "232a80e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ID', 'age', 'job', 'marital', 'education', 'default', 'balance',\n",
       "       'housing', 'loan', 'contact', 'day', 'month', 'duration', 'campaign',\n",
       "       'pdays', 'previous', 'poutcome'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "57d86c61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 31647 entries, 0 to 31646\n",
      "Data columns (total 18 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   ID          31647 non-null  int64 \n",
      " 1   age         31647 non-null  int64 \n",
      " 2   job         31647 non-null  object\n",
      " 3   marital     31647 non-null  object\n",
      " 4   education   31647 non-null  object\n",
      " 5   default     31647 non-null  object\n",
      " 6   balance     31647 non-null  int64 \n",
      " 7   housing     31647 non-null  object\n",
      " 8   loan        31647 non-null  object\n",
      " 9   contact     31647 non-null  object\n",
      " 10  day         31647 non-null  int64 \n",
      " 11  month       31647 non-null  object\n",
      " 12  duration    31647 non-null  int64 \n",
      " 13  campaign    31647 non-null  int64 \n",
      " 14  pdays       31647 non-null  int64 \n",
      " 15  previous    31647 non-null  int64 \n",
      " 16  poutcome    31647 non-null  object\n",
      " 17  subscribed  31647 non-null  object\n",
      "dtypes: int64(8), object(10)\n",
      "memory usage: 4.3+ MB\n"
     ]
    }
   ],
   "source": [
    "df_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "13acf225",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13564 entries, 0 to 13563\n",
      "Data columns (total 17 columns):\n",
      " #   Column     Non-Null Count  Dtype \n",
      "---  ------     --------------  ----- \n",
      " 0   ID         13564 non-null  int64 \n",
      " 1   age        13564 non-null  int64 \n",
      " 2   job        13564 non-null  object\n",
      " 3   marital    13564 non-null  object\n",
      " 4   education  13564 non-null  object\n",
      " 5   default    13564 non-null  object\n",
      " 6   balance    13564 non-null  int64 \n",
      " 7   housing    13564 non-null  object\n",
      " 8   loan       13564 non-null  object\n",
      " 9   contact    13564 non-null  object\n",
      " 10  day        13564 non-null  int64 \n",
      " 11  month      13564 non-null  object\n",
      " 12  duration   13564 non-null  int64 \n",
      " 13  campaign   13564 non-null  int64 \n",
      " 14  pdays      13564 non-null  int64 \n",
      " 15  previous   13564 non-null  int64 \n",
      " 16  poutcome   13564 non-null  object\n",
      "dtypes: int64(8), object(9)\n",
      "memory usage: 1.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df_test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "127f9a1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(31647, 18)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6ff4ee63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13564, 17)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6f947e0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <td>2.0</td>\n",
       "      <td>11218.0</td>\n",
       "      <td>22519.0</td>\n",
       "      <td>33879.5</td>\n",
       "      <td>45211.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>18.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>balance</th>\n",
       "      <td>-8019.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>450.0</td>\n",
       "      <td>1431.0</td>\n",
       "      <td>102127.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>day</th>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>duration</th>\n",
       "      <td>0.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>318.5</td>\n",
       "      <td>4918.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>campaign</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pdays</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>871.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>previous</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>275.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             min      25%      50%      75%       max\n",
       "ID           2.0  11218.0  22519.0  33879.5   45211.0\n",
       "age         18.0     33.0     39.0     48.0      95.0\n",
       "balance  -8019.0     73.0    450.0   1431.0  102127.0\n",
       "day          1.0      8.0     16.0     21.0      31.0\n",
       "duration     0.0    104.0    180.0    318.5    4918.0\n",
       "campaign     1.0      1.0      2.0      3.0      63.0\n",
       "pdays       -1.0     -1.0     -1.0     -1.0     871.0\n",
       "previous     0.0      0.0      0.0      0.0     275.0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#five point summary consisting of min, Q1(25%), Q2(50%), Q3(75%)\n",
    "# and max values of each numerical attributes\n",
    "\n",
    "summary = df_train.describe().T\n",
    "summary.loc[:,'min':'max']\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9f332432",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <td>1.0</td>\n",
       "      <td>11546.0</td>\n",
       "      <td>22782.0</td>\n",
       "      <td>33974.25</td>\n",
       "      <td>45206.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>18.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>48.00</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>balance</th>\n",
       "      <td>-3313.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>445.0</td>\n",
       "      <td>1413.25</td>\n",
       "      <td>98417.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>day</th>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>21.00</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>duration</th>\n",
       "      <td>0.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>319.00</td>\n",
       "      <td>3253.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>campaign</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.00</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pdays</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>850.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>previous</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>55.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             min      25%      50%       75%      max\n",
       "ID           1.0  11546.0  22782.0  33974.25  45206.0\n",
       "age         18.0     33.0     39.0     48.00     95.0\n",
       "balance  -3313.0     71.0    445.0   1413.25  98417.0\n",
       "day          1.0      8.0     16.0     21.00     31.0\n",
       "duration     0.0    102.0    180.0    319.00   3253.0\n",
       "campaign     1.0      1.0      2.0      3.00     58.0\n",
       "pdays       -1.0     -1.0     -1.0     -1.00    850.0\n",
       "previous     0.0      0.0      0.0      0.00     55.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#five point summary consisting of min, Q1(25%), Q2(50%), Q3(75%)\n",
    "# and max values of each numerical attributes\n",
    "\n",
    "summary = df_test.describe().T\n",
    "summary.loc[:,'min':'max']\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "94499aa4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing value:\n",
      " ID            0\n",
      "age           0\n",
      "job           0\n",
      "marital       0\n",
      "education     0\n",
      "default       0\n",
      "balance       0\n",
      "housing       0\n",
      "loan          0\n",
      "contact       0\n",
      "day           0\n",
      "month         0\n",
      "duration      0\n",
      "campaign      0\n",
      "pdays         0\n",
      "previous      0\n",
      "poutcome      0\n",
      "subscribed    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#checking missing values in the dataset\n",
    "\n",
    "print('Missing value:\\n', df_train.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c462fa4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing value:\n",
      " ID           0\n",
      "age          0\n",
      "job          0\n",
      "marital      0\n",
      "education    0\n",
      "default      0\n",
      "balance      0\n",
      "housing      0\n",
      "loan         0\n",
      "contact      0\n",
      "day          0\n",
      "month        0\n",
      "duration     0\n",
      "campaign     0\n",
      "pdays        0\n",
      "previous     0\n",
      "poutcome     0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print('Missing value:\\n', df_test.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "21c20452",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID            31647\n",
       "age              76\n",
       "job              12\n",
       "marital           3\n",
       "education         4\n",
       "default           2\n",
       "balance        6326\n",
       "housing           2\n",
       "loan              2\n",
       "contact           3\n",
       "day              31\n",
       "month            12\n",
       "duration       1454\n",
       "campaign         45\n",
       "pdays           509\n",
       "previous         38\n",
       "poutcome          4\n",
       "subscribed        2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#is used to count the number of unique values in each column of a pandas DataFrame\n",
    "     \n",
    "df_train.apply(lambda x: len(x.unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f9a10ff1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID           13564\n",
       "age             75\n",
       "job             12\n",
       "marital          3\n",
       "education        4\n",
       "default          2\n",
       "balance       4292\n",
       "housing          2\n",
       "loan             2\n",
       "contact          3\n",
       "day             31\n",
       "month           12\n",
       "duration      1201\n",
       "campaign        40\n",
       "pdays          422\n",
       "previous        33\n",
       "poutcome         4\n",
       "dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#is used to count the number of unique values in each column of a pandas DataFrame\n",
    "     \n",
    "df_test.apply(lambda x: len(x.unique()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44137974",
   "metadata": {},
   "source": [
    "Univariate analysis on the train dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1a3868aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "no     27932\n",
       "yes     3715\n",
       "Name: subscribed, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Frequency of 'subscribed'\n",
    "df_train['subscribed'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "19af8f39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='subscribed', ylabel='count'>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the 'subscribed' frequency\n",
    "sns.countplot(data=df_train, x='subscribed')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "07410acc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "no     0.882611\n",
       "yes    0.117389\n",
       "Name: subscribed, dtype: float64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normalizing the frequency table of 'Subscribed' variable\n",
    "df_train['subscribed'].value_counts(normalize=True)\n",
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7407db85",
   "metadata": {},
   "source": [
    "From the above analysis we can see that only 3,715 people out of 31,647 have subscribed which is roughly 12%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2373cd00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "blue-collar      6842\n",
       "management       6639\n",
       "technician       5307\n",
       "admin.           3631\n",
       "services         2903\n",
       "retired          1574\n",
       "self-employed    1123\n",
       "entrepreneur     1008\n",
       "unemployed        905\n",
       "housemaid         874\n",
       "student           635\n",
       "unknown           206\n",
       "Name: job, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Frequency table\n",
    "df_train['job'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "153ee5f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the job frequency table\n",
    "sns.set_context('paper')\n",
    "df_train['job'].value_counts().plot(kind='bar', figsize=(10,6));\n",
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b710f29",
   "metadata": {},
   "source": [
    "We can see that most of the clients beloned to blue-collar job and students are least in general as they don't make term deposits in general."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cd45fb93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "married     19095\n",
       "single       8922\n",
       "divorced     3630\n",
       "Name: marital, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train['marital'].value_counts()\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1fcf20b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=df_train, x='marital');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "eef4bd01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=df_train, x='marital', hue='subscribed');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "237f7340",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anumy\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df_train['age']);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "597c9939",
   "metadata": {},
   "source": [
    "We can infer that most of the clients fall in the age group between 20-60."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a6dff83",
   "metadata": {},
   "source": [
    "# Bivariate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c05a5480",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "subscribed       no  yes\n",
      "job                     \n",
      "admin.         3179  452\n",
      "blue-collar    6353  489\n",
      "entrepreneur    923   85\n",
      "housemaid       795   79\n",
      "management     5716  923\n",
      "retired        1212  362\n",
      "self-employed   983  140\n",
      "services       2649  254\n",
      "student         453  182\n",
      "technician     4713  594\n",
      "unemployed      776  129\n",
      "unknown         180   26\n"
     ]
    }
   ],
   "source": [
    "#job vs subscribed\n",
    "print(pd.crosstab(df_train['job'],df_train['subscribed']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b8c91d24",
   "metadata": {},
   "outputs": [],
   "source": [
    "job = pd.crosstab(df_train['job'],df_train['subscribed'])\n",
    "job_norm = job.div(job.sum(1).astype(float), axis=0)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1346172d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "job_norm.plot.bar(stacked=True,figsize=(8,6));\n",
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e41985f",
   "metadata": {},
   "source": [
    "From the above graph we can infer that students and retired people have higher chances of subscribing to a term deposit, which is surprising as students generally do not subscribe to a term deposit. The possible reason is that the number of students in the dataset is less and comparatively to other job types, more students have subscribed to a term deposit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "f5c099c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>subscribed</th>\n",
       "      <th>no</th>\n",
       "      <th>yes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>marital</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>divorced</th>\n",
       "      <td>3185</td>\n",
       "      <td>445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>married</th>\n",
       "      <td>17176</td>\n",
       "      <td>1919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>single</th>\n",
       "      <td>7571</td>\n",
       "      <td>1351</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "subscribed     no   yes\n",
       "marital                \n",
       "divorced     3185   445\n",
       "married     17176  1919\n",
       "single       7571  1351"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Marital status vs subscribed\n",
    "pd.crosstab(df_train['marital'], df_train['subscribed'])\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b76a6e6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>subscribed</th>\n",
       "      <th>no</th>\n",
       "      <th>yes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>marital</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>divorced</th>\n",
       "      <td>0.877410</td>\n",
       "      <td>0.122590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>married</th>\n",
       "      <td>0.899502</td>\n",
       "      <td>0.100498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>single</th>\n",
       "      <td>0.848577</td>\n",
       "      <td>0.151423</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "subscribed        no       yes\n",
       "marital                       \n",
       "divorced    0.877410  0.122590\n",
       "married     0.899502  0.100498\n",
       "single      0.848577  0.151423"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "marital = pd.crosstab(df_train['marital'], df_train['subscribed'])\n",
    "marital_norm = marital.div(marital.sum(1).astype(float), axis=0)\n",
    "marital_norm\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ffaaf6c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "marital_norm.plot.bar(stacked=True, figsize=(10,6));"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "094ea88f",
   "metadata": {},
   "source": [
    "From the above analysis we can infer that marital status doesn't have a major impact on the subscription to term deposits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "513ef98d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>subscribed</th>\n",
       "      <th>no</th>\n",
       "      <th>yes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>default</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>no</th>\n",
       "      <td>27388</td>\n",
       "      <td>3674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yes</th>\n",
       "      <td>544</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "subscribed     no   yes\n",
       "default                \n",
       "no          27388  3674\n",
       "yes           544    41"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#default vs subscription\n",
    "pd.crosstab(df_train['default'], df_train['subscribed'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "259ba9e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>subscribed</th>\n",
       "      <th>no</th>\n",
       "      <th>yes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>default</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>no</th>\n",
       "      <td>0.881720</td>\n",
       "      <td>0.118280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yes</th>\n",
       "      <td>0.929915</td>\n",
       "      <td>0.070085</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "subscribed        no       yes\n",
       "default                       \n",
       "no          0.881720  0.118280\n",
       "yes         0.929915  0.070085"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dflt = pd.crosstab(df_train['default'], df_train['subscribed'])\n",
    "dflt_norm = dflt.div(dflt.sum(1).astype(float), axis=0)\n",
    "dflt_norm\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "91982b26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='default'>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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VdLHP97aN/P8+te/zubNm9m8eTNTp0496OuZOnUqmzdvbt1gUjdjLvVh165d3H///YwZM6bdo0j7Zcw1YLzxxhuceeaZTJo0iYkTJ7Jhw4Z3rZKvueYalixZAux5hsg3vvENPvvZz3LVVVexa9cudu7cycyZM5k4cSITJkxg+fLlADz55JNMmjSJU089leuvvx6Ajo4ObrnlFs466yyeeOIJOjo62LBhAwDvvPMOs2bNYty4cdxwww37bv++++7j85//PBMnTuT2228HYPfu3cydO5dTTjmFOXPm8Ic//OFQ/Kg0CPlsFg0YDz/8MOeffz7f/e536ezsZNOmTfvd9ze/+Q2XXHIJCxcu5Oqrr+YnP/kJRx11FKNGjWLJkiV0dXWxc+dOtm7dyre//W1WrVrF6NGj2bZt277ryExWrVoFwD333LPv8pdeeokf//jHjBs3jhkzZrBy5UqOO+44nn32WdasWUNmcsEFF3DhhReyfv16duzYwfr161m3bh2TJ0/uvx+QBjVX5howTj/9dB566CFuu+02Nm3axJFHHrnffY866iguuOACAGbNmsXzzz+/bzV+yy23sHbtWj72sY+xZs0aZsyYwejRowEYMWLEvuuYNWtWr9c9btw4Pve5zzF06FAuvfRSnn/+eZYtW8bq1auZPHkyU6ZM4Ze//CUbN25k9erVzJ49G4BTTz2VcePGterHIb2LMdeAMX36dH7+858zcuRILr30UlasWPGup/S98847+77u/jzad50fO3Ysa9euZezYscybN48f/ehHZOZ79t3r6KOP7vXy3q47M5k3bx4vvvgiL774Ips2beKyyy4jM9+1b8/zUqsYcw0Yr776KqNHj2bevHnMnj2brVu38tprr7Fz507eeuutfYdEAHbu3MnPfvYzAB577DGmTZu274U511xzDfPnz2fdunVMnTqVZ555hq1btwK86zDL/qxfv55f/OIXdHV18fjjjzNt2jTOPfdcFi9ezI4dO/bN+tZbb3HmmWfy6KOPArBu3TpeeeWVFv9UpD08Zq4BY/ny5Xz/+9/nQx/6EMcffzyLFy8G4LTTTuOUU05h4sSJ+/YdNWoUzzzzDDfffDMTJkzgK1/5Cs899xw33ngjQ4cO5eijj2bRokWMGjWKu+66ixkzZhARTJs2jXvvvfeAc0yaNIk777yTtWvXMnPmTM4+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\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dflt_norm.plot.bar(stacked=True, figsize=(6,6))\n",
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec2f5411",
   "metadata": {},
   "source": [
    "We can infer that clients having no previous default have slightly higher chances of subscribing to a term loan as compared to the clients who have previous default history."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5188d20c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Status of Subscription of Term Deposit')"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (12, 8))\n",
    "\n",
    "colors = ['blue', 'yellow']\n",
    "labels = 'Not Subscribed', 'Subscribed'\n",
    "\n",
    "df_train['subscribed'].value_counts().plot(kind = 'pie', autopct = '%1.2f%%', shadow = False, legend = True, colors = colors, \n",
    "                                labels = labels, fontsize = 12, startangle = 25)\n",
    "plt.title('Status of Subscription of Term Deposit', fontsize = 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "703ad205",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting the target variables into 0s and 1s\n",
    "df_train['subscribed'].replace('no', 0,inplace=True)\n",
    "df_train['subscribed'].replace('yes', 1,inplace=True)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "c7d4cd05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        0\n",
       "1        0\n",
       "2        0\n",
       "3        1\n",
       "4        0\n",
       "        ..\n",
       "31642    0\n",
       "31643    1\n",
       "31644    0\n",
       "31645    0\n",
       "31646    1\n",
       "Name: subscribed, Length: 31647, dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train['subscribed']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "54d57f85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>age</th>\n",
       "      <th>balance</th>\n",
       "      <th>day</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>subscribed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.013337</td>\n",
       "      <td>0.067897</td>\n",
       "      <td>-0.063399</td>\n",
       "      <td>0.007183</td>\n",
       "      <td>-0.103508</td>\n",
       "      <td>0.436148</td>\n",
       "      <td>0.254476</td>\n",
       "      <td>0.296663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>0.013337</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.103245</td>\n",
       "      <td>-0.011056</td>\n",
       "      <td>-0.003870</td>\n",
       "      <td>0.005733</td>\n",
       "      <td>-0.021947</td>\n",
       "      <td>0.005761</td>\n",
       "      <td>0.024538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>balance</th>\n",
       "      <td>0.067897</td>\n",
       "      <td>0.103245</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.003461</td>\n",
       "      <td>0.024274</td>\n",
       "      <td>-0.012032</td>\n",
       "      <td>0.001789</td>\n",
       "      <td>0.013843</td>\n",
       "      <td>0.050807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>day</th>\n",
       "      <td>-0.063399</td>\n",
       "      <td>-0.011056</td>\n",
       "      <td>0.003461</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.032288</td>\n",
       "      <td>0.159168</td>\n",
       "      <td>-0.087626</td>\n",
       "      <td>-0.048752</td>\n",
       "      <td>-0.029600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>duration</th>\n",
       "      <td>0.007183</td>\n",
       "      <td>-0.003870</td>\n",
       "      <td>0.024274</td>\n",
       "      <td>-0.032288</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.080305</td>\n",
       "      <td>0.000529</td>\n",
       "      <td>0.001783</td>\n",
       "      <td>0.389838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>campaign</th>\n",
       "      <td>-0.103508</td>\n",
       "      <td>0.005733</td>\n",
       "      <td>-0.012032</td>\n",
       "      <td>0.159168</td>\n",
       "      <td>-0.080305</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.087570</td>\n",
       "      <td>-0.033151</td>\n",
       "      <td>-0.070607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pdays</th>\n",
       "      <td>0.436148</td>\n",
       "      <td>-0.021947</td>\n",
       "      <td>0.001789</td>\n",
       "      <td>-0.087626</td>\n",
       "      <td>0.000529</td>\n",
       "      <td>-0.087570</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.428938</td>\n",
       "      <td>0.108290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>previous</th>\n",
       "      <td>0.254476</td>\n",
       "      <td>0.005761</td>\n",
       "      <td>0.013843</td>\n",
       "      <td>-0.048752</td>\n",
       "      <td>0.001783</td>\n",
       "      <td>-0.033151</td>\n",
       "      <td>0.428938</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.088081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>subscribed</th>\n",
       "      <td>0.296663</td>\n",
       "      <td>0.024538</td>\n",
       "      <td>0.050807</td>\n",
       "      <td>-0.029600</td>\n",
       "      <td>0.389838</td>\n",
       "      <td>-0.070607</td>\n",
       "      <td>0.108290</td>\n",
       "      <td>0.088081</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  ID       age   balance       day  duration  campaign  \\\n",
       "ID          1.000000  0.013337  0.067897 -0.063399  0.007183 -0.103508   \n",
       "age         0.013337  1.000000  0.103245 -0.011056 -0.003870  0.005733   \n",
       "balance     0.067897  0.103245  1.000000  0.003461  0.024274 -0.012032   \n",
       "day        -0.063399 -0.011056  0.003461  1.000000 -0.032288  0.159168   \n",
       "duration    0.007183 -0.003870  0.024274 -0.032288  1.000000 -0.080305   \n",
       "campaign   -0.103508  0.005733 -0.012032  0.159168 -0.080305  1.000000   \n",
       "pdays       0.436148 -0.021947  0.001789 -0.087626  0.000529 -0.087570   \n",
       "previous    0.254476  0.005761  0.013843 -0.048752  0.001783 -0.033151   \n",
       "subscribed  0.296663  0.024538  0.050807 -0.029600  0.389838 -0.070607   \n",
       "\n",
       "               pdays  previous  subscribed  \n",
       "ID          0.436148  0.254476    0.296663  \n",
       "age        -0.021947  0.005761    0.024538  \n",
       "balance     0.001789  0.013843    0.050807  \n",
       "day        -0.087626 -0.048752   -0.029600  \n",
       "duration    0.000529  0.001783    0.389838  \n",
       "campaign   -0.087570 -0.033151   -0.070607  \n",
       "pdays       1.000000  0.428938    0.108290  \n",
       "previous    0.428938  1.000000    0.088081  \n",
       "subscribed  0.108290  0.088081    1.000000  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Correlation matrix\n",
    "tc = df_train.corr()\n",
    "tc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "a4603104",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABAUAAAJCCAYAAAC4dH6aAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAADG/klEQVR4nOzdd3hURdvH8e+kUQJJCMkGEEIJ0puKKFItNAG7gKj4PPYCCAIqgjRBRZAiCogioBQBCb0pQkKxUKSDtFBEJQVIaAlp5/1j40IIgfi8ZDfZ/D5ee4XdM7t7zx5Pm3PPjLEsCxEREREREREpeDxcHYCIiIiIiIiIuIYaBUREREREREQKKDUKiIiIiIiIiBRQahQQERERERERKaDUKCAiIiIiIiJSQKlRQERERERERKSAUqOAiIiIiIiISD5ijClkjPnJGBNvjHnsKssrG2MiM8q8dK3PUqOAiIiIiIiISP6SAjwKjMlm+YfAG0BT4FljTGB2H6RGAREREREREZF8xLKsdMuy/r5GkZsty9piWVYqEAE0yK6g140O7mqKhD5hOeN75PpOHHzG1SFIhvOpKa4OQTIEFy7r6hAkQ2JanKtDkMv4eZd3dQiSodXKGFeHIBk6VDjv6hAkQ2yS7m/mFW/XbWFcHUNucub1bNIf3w4GBl7x8mDLsgb9y4+6fJ2cBpQpICIiIiIiIpKXWZY1yLIsc8Vj0P/wUemX/TsAOJVdQTUKiIiIiIiIiGTDGA+nPW6gA8aYW40xnkAzYGN2BZ3SfUBEREREREREbhxjzDzgFuCcMaYh8APgb1nWbKAvMBnwBqZalpVtpoAaBURERERERESyYfJogr1lWY9eY9lB7BkC15U3ayciIiIiIiIiuU6ZAiIiIiIiIiLZuMF9/fMc966diIiIiIiIiGRLmQIiIiIiIiIi2VCmgIiIiIiIiIi4JTUKiIiIiIiIiBRQ6j4gIiIiIiIikg1jjKtDyFXKFBAREREREREpoJQpICIiIiIiIpIt976X7t61ExEREREREZFsKVNAREREREREJBuaklBERERERERE3JIyBURERERERESyoUwBEREREREREXFLyhQQERERERERyYZx83vp7l07EREREREREcmWMgVEREREREREsqExBURERERERETELSlTQERERERERCQbyhQQEREREREREbekTAERERERERGRbLh7poAaBa5j5sQeNG9Uk1WRO+jSdZyrw3FLET/uYNzoRQC83LUtLVrfkmn5jm2HGTZwFikpaXTo3IROTzUHYOqXPzBv9npSUtJYETHUUX7S+OVE/LgDgNDyNgYNe5LCRXycU5l8bv2aXXw+ZgkAz77Wmrtb1su0fPf2I4wYPIeU1DQe7tSYxzo3AeBiUgoj35vLvj1/YIxhyMhnKF8phMMH/2bkkO9ITk6hqG9h+r/fmeCQACfXKv9KSkqm9xtjiTr0J6HlQxg1uidFfQtnKpOens6gAV+wadMeAgP9GD22JzZbIADr1m7l4xEzsCy4vUEN+g94lhMnTtL9tZGkpacD0LXb49x9T32n1y0/iPhxO+NGLQDg5W7tadH61kzLd2yLYuiAmaSkpNKhczOeePpuAI4eiaZfnymcP5fE3ffVo3uvhwB4/ZXxxMYkABAXm0Cr++vT6+3HmPTZUlat3Iqnpwc1a5en78An8PR075OP3JCUdJEePT4iKuoPQkNLM3bs2/j6FslUZteugwwY8Bn79h1mwoR3adr0NhdF634a2gJ5vkpFAKYdOMra6LirlhtzRx2iEy/ywY59mV7vV7cawYV96PHrjlyP1d0d+GUHEVMXAtDkqbZUa3xp35V45jyLRkzh3KkzeHh40OiJNlS5qy4As975hPPxZ/Hytl8e/GfsW84P3s0d3bidzTMWAHBrx/ZUvCvzceWHDyZw/lQ8Vno6FRveSr3H2rggSimI1ChwHROmrmT6d2vp9FAjV4fillJT0hg3ehGTpnbH08uT554cRbN7auPjc+l/zZHvf8cHo56lbLkgunQcwb0tbyHY5k+DhlVp+0ADnu4wItNnPvnM3bz4qn0n+snHC1kY/gsdn2zq1HrlR6kpaXw+Zgljv3oNT08PXusyjkbNa2VaF2OHz2fQiC6UKRfES51H0/y+OgTZ/Pl60g/cXO0m+g3rTPLFFNLS7BecX41fyX9fbUX9O6sQPms9381YxytvtHdVFfOduXNWEVa5LJ+O78OEz+Yxa+ZKnnvhwUxlItb8RmLiRZavHMvCBWuZOD6cAYOeJ/70WUaPmsVX0wYQGOjHqVNnACgZ6M/0WUPw8fHm1KkzdHisrxoFriI1JY1xoxYwaVpPPL08eLbzxxn7Jm9HmRHvz+XD0c9RtlwQT3f4iPta3UKwLYBPRy3ktR4PcOdd1Xn1+XHs2nGEWnUqMHbCq473vvzfsTS9uzYAt95+M8++1BovL08GvfM1K5Zsou2Ddzi9zvnd7NkrufnmUCZOfJdPP53FjBlLefHFxzKVCQ4uwbBh3ZgyZYFrgnRTnsbwfJWK9Nq4gzTLYuwddfk55iQplpWpXMsyNmKTkrO8v26gP2BleV3+vbTUNCKmLqTzB6/j4enJN31GUfmO2nh52/ddxsPQ7JkHKFU5lAsJZ5nWcySV6tfAK2Pf9vA7z1OybIgrq+C20lPT2DxjAfcP7onx9GBJv48Jvb02nt6XjivNe/wX7yKFSU9PZ9m7owhtUIfA0JtcGLUUFLoVcR3rftnL2XOJrg7Dbe3edZSbq9xEySA/AgJ8qVm7PNu3RjmWx0THYzwMlcJK4ePjRbO76/Dzhr0A1KgZSrDNP8tn+mbcSbUsi6TEZHSikTN7dx8jrEoZAksWxz/Al+q1Q9m17bBjeWxMAh7GUCFjXTS+uxYbf7Lf6Vnz/TYe7mRvOPMp5E2RooUA+zo4f9a+/Zw7m0hAYDEn1yp/i4zYSvv2jQFo264RayO3XqXMb7TLKNO6zZ38tMF+l23Zsg20bduIwEA/AMdfbx8vx4VtUuJFrHRtH1eze+cRbq5aNmPfVIyatStk3TcZQ6Ww0vj4eNP8njr8vH4v6enp7Nl9jIaNamCMoVWb+qxfuyvTZ5+MO8PRI9HcWv9mAOo3qIKXlycAVaqVJSY63mn1dCcREZt44IHmALRv34zIyM1ZyoSElKR69Up4eBgnR+feqvoXI+rseeKTUzibksrvCWepUcIvU5kinp7cU8bGsj/+zvS6B/BEpXLMijruxIjd19/7j2KrcBO+Jfwo4udLmSrl+XPPpWN54WJFKVU5FICi/sUpXKwIiWcvuCrcAiX24BECy5elSIAfhYsXI7hyBaL3RWUq413Efg6bnppKemqaTmHzEOPE/1zhupkCxpj/Ap2B0sCfwLeWZU3J7cCkYIiNScAWcunCPtgWQFxGei3YU2yDbQGXlof4O9Jvr+WTjxeyYulmyoUG073Xg9ctL3Ay9gxBlzWyBNn8OBl75rLlCZmXB/tzMvYMZ89cwMvbk3HDF7B31zGq1wql65sP4ePjxYvd29Ln1Ul8OnIRfv5FGf91d6fWKb+LjTmNLcTeFcAWEkhM7OksZWJiThOSUaZQIR9SUlKxLIujR09gpVs8/eRA0lLT6PHGEzS4oyYAx46d4PWuH3P8zxje/+A151UoH4mNTcjU6Gi7Yt9j33cFOJ4H2wKIjU0gIf48/gG+l14P8WfXjksn5ABrVm2n2d11snQRSEtLZ8XSzfTum/nutuRMTMxJQkJKAvaL/5iYUy6OqOAoWciHkxcvOp6fvJhMyUKZu+09GVaOuYePk3bFRU670NKsPRHH+ZRUZ4Tq9s6dSqBYyUv7rmIl/Tl36urnTdGH/iA9LZ3il5VfNHwKxsNQu8Wd3NauWa7HW5BcOJ1A0cBLv3XRQH8Sr7Julg8ey8moP6h6XyMCyytLQJzjmpkCxpiuwN3AS8BtQFfgXmPM69d4zyBjjHX5IyVh5w0NWuR6uvd6kCWrBlO9ZjlWfb/N1eG4tbTUdP44Ekuz++owaVZPLGDR3J8AWDDnJ94c1JG5K9+l2X11+HrSD64NNh8z/7LhOC01nUOHjjN5Sn8+GP4a/d+ZQGpqGgChoaWYv2gE88KH883XS0lOTsmFiCU7P36/lXtb3ZLl9c/GLKJWnQrUqVfJBVG5F/NvNxjJVTcVLUyZokXYcjI+0+vFvb1oHBLEiuMnXBNYAZZ07gJLx0yndddOjtfa9XqG/457m07DurE3cgtHd+x3YYQFV5uBr9Nx4lBOH/+b01dk1ojrGOPhtIcrXO9bHwWetSwryrKsi5ZlHQCeAx7O7g2WZQ2yLMtc/vD2r30jYxY3EmzzJyb68rtv8ZQMvpRyGBTsT2xM/KXl0QkEBWdOScyOh4cHre6vz48rs6ZcS1Ylg/0yZ2nEnCEwyO+y5f5ZsjgCg4rjX8IXP/+i3HZnFYwxNG5ek6gD9hO8tat2cNsd9hTpZvfVYe+uo06qTf41/ZvlPPrwWzz68FsE20oQE22/2xl94hTBwQFZyttsJYjOKHPxYjLe3l4YY7CFlKBxk3r4+HhTvkJpSgb5E3tFpkFo+VIUL+7Lvn3Hcr1e+U1wcObMgJjoBIKCL89q8s+U5h8bE09QkB/+Ab4kxJ+/9Hp0AiUve9+pk2c5cviEo+vAPxbO+4m9e47xxluP5kJt3NfXXy/iwQe78+CD3bHZShIdfRKAEyfiCA4u4eLoCg57ZkAhx/OShXw4dfHS2AFV/ItTzb8Y05rWp2/dqtwZHMir1SoR6luUcr5FmNK0Ph/fUYcwv2IMqFfdFVVwG8UC/Tl38tK+69zJBIoFZj5vSktNY8GHX1H/gebcVP1SI+Q/GQOFixWlyl31iD70h3OCLiCKlvDnwmWZARdOJVCkRNZusGDvRlCmVlWOb93trPCkgLteo0CqZVmZ8rksy7oI6LaS3BA1a5XnwL7jnIw7Q3z8eXbtOErdWy4doGwhAaSnW0QdOkFyciqRa3bQsNG1TxiOHY1x/Htd5C7KV7TlWvzupHrNUA7u+4tTJ8+SEH+ePTuPUrteBcfyYJs/6ekWRzLWxfo1u2jQqBrGGOreFsa+Pfb+oNu2HKJ8JftvXrRYIQ7u+xOA3zYeoGxosNPrld889XQb5s0fzrz5w2natB6LF68HYOmSDTRtdmuW8k2a1mNJRpkVy3+hYaM6ADRrfitbf9uHZVnExcZz6uQZgoICiI4+RVLGQF9xsfEc2H+MsmW1Xq5Us3YF9v/+z77pHLt2HL7KvimdqEN/k5ycQsTqHTRsXAMPDw+q1SjHzxv2YFkWK5dvpnHTmo73rVm1LUvXgc0b9zNr+hqGj3reMbaA5EyXLg+wcOEnLFz4Cc2a3caiRREALF4cSfPmGkDTWfYlnCOsuC8BPt4U9/aiekBxdsdf6n625u9YOkdu4pm1m/lg+z5+iT3F+N+j2B1/hiciNvLM2s30+nUHh86cY8i2vS6sSf5Xukp5og//yfnTZ0g8c56/9h3JdOEP8MPEOZSqXI46LRo6XktPS+PCmXMApKakcPi3vQSFlnZq7O4uuHIFTh45TmL8GZLOniP2wGFsVS+tm5Ski1w4FQ9AWmoqf27fi38ZDfqYV7h7psD1xhQobYx55IrXDFAql+LJc8KnvEn9emH4Fi3EwV8/5aFnPmLX77qrdqN4eXvStecDvPjMWABe7taWQoW86fHKRPoNfoJgmz+9+z7K2z2/IjU1jcc6NXb04538+Urmz9lA/OlztLt3AM++1IpHOjRi4rhlRB36Gw9jqBhWir4DOrqwhvmHl7cnL77elu7//QyA515tjU8hb97u+iW9BzxOkM2fbm89xMA+X5OamsZDHRo5+ly/9Hpb3u8/i6SkZEIr2vjPS60A6PnOo3w4YDaWZRFQohh93+uU7fdLVo93vI/eb4ylTavXCQ0txagxPQBYs3ozu3dF0bV7B+65tz4REb/RumV3Sgb6M2psTwCqVi1PteoVeLB9b7y8PHmn/3/x9vbiyOG/+PCDrzHGnk3T562nKVEiZ9k3BYl93/QgL3QZDcAr3dpRqJA3r78ynv6DOxNsC6BP38d5q8eXpKam8fgTTR37pm49H6Tfm1MZ/t4cmt9bh9p1Kzo+d9X3W3n2xVaZvuuTkfM5eyaRl5+17wdbtrmN/zzf0jkVdSMdO7amZ8+PaNHixYwpCe3Tqf3446/s2nWA119/iqio4/znP/05c+YcERGbqVatIlOnDr3OJ8v1pFkWk/cfYVQDe6Pk1ANHSUm3eO/WGozefTBT1oDkLk8vT5o/8wAz3rbvT5o81RYvH2++GzyRVl2fIOnceXZ8/zPBFcpwZOvvALTr1QU/WyBzBozHSkvHsiyqNqpHpdtquLIqbsfDy5P6Tz7I0gH248qtndrh5ePN9x+Mp/FLnfHw8uTHEV+QlpKCZVmUb1CX0PrKthbnMJaV/bCWxpiBZDPupWVZQ3L6JUVCn9DYmXnEiYPPuDoEyXA+VQk3eUVw4bKuDkEyJKZdfW5zcQ0/7/KuDkEytFoZc/1C4hQdKpy/fiFxitgkTaSWV7xdt4VbD+ZSqsZbTruePbFnuNN/y+tlCmSXe6eLfBEREREREZF87nqNAl2dEoWIiIiIiIhInuTeWSnXbBSwLEtDhYuIiIiIiIi4qetlCoiIiIiIiIgUWK6aFcBZ3Lt2IiIiIiIiIpItZQqIiIiIiIiIZEOZAiIiIiIiIiLilpQpICIiIiIiIpIN4+b30t27diIiIiIiIiKSLWUKiIiIiIiIiGRDYwqIiIiIiIiIiFtSo4CIiIiIiIhIAaXuAyIiIiIiIiLZMMa4OoRcpUwBERERERERkQJKmQIiIiIiIiIi2dBAgyIiIiIiIiLilpQpICIiIiIiIpIN4+b30t27diIiIiIiIiKSLWUKiIiIiIiIiGRDYwqIiIiIiIiIiFtSpoCIiIiIiIhINpQpICIiIiIiIiJuSZkCIiIiIiIiItnQ7AMiIiIiIiIi4paUKSAiIiIiIiKSHTcfU8ApjQInDj7jjK+RHChVeZqrQ5AMO3d1dnUIkuFiWoKrQ5AM7p6el9+cSTnq6hAkw/x7C7s6BMmQamk/lVekWymuDkHELShTQERERERERCQbmn1ARERERERERNySGgVERERERERECih1HxARERERERHJhjHG1SHkKmUKiIiIiIiIiBRQyhQQERERERERyYa7z47k3rUTERERERERkWwpU0BEREREREQkG5qSUERERERERETckjIFRERERERERLKj2QdERERERERExB0pU0BEREREREQkO25+K93NqyciIiIiIiIi2VGmgIiIiIiIiEh2NKaAiIiIiIiIiLgjZQqIiIiIiIiIZEeZAiIiIiIiIiLijpQpICIiIiIiIpIdN7+V7ubVExEREREREZHsqFFAREREREREpIBS9wERERERERGRbFgaaFBERERERERE3JEyBURERERERESy496JAsoUEBERERERESmoctQoYIypb4xZbYzZaIzxMsZ8kNuBiYiIiIiIiLich3HewwVy2n1gFPAIMNeyrFRjTINcjMkpIn7cwbjRiwB4uWtbWrS+JdPyHdsOM2zgLFJS0ujQuQmdnmoOwNQvf2De7PWkpKSxImKoo/yk8cuJ+HEHAKHlbQwa9iSFi/g4pzIFxMyJPWjeqCarInfQpes4V4dT4PwcsYuvxi0BoMvLrWnSol6m5RNHLmDdD9sIKRPIqCndXRCh+0lKSqZv7y84HHWCcqHBDB/1IkWLFs5UJj09naGDprNl034CA4vz0eiXCLYF8Pffp+jX50v27jlKr7c68FjHZo7P7PHap+zacYQOnZvTvecjrqhavmD//SdzJOP3/3DU81f9/YcNmsmWTQcIDCzG8NEvEGwLAGDip4tZsXQzRYsW4r3h/yGschmiT5ymV/eJpKdZALzUtR3N7q4DwNQvV7JsyUaMMbza/QHH6wIRP25n3KgFALzcrT0tWt+aafmObVEMHTCTlJRUOnRuxhNP3w3A0SPR9OszhfPnkrj7vnp07/UQAIP6fcO2LYco6lsIgLETXiHYFsDQATPYs/sYAAnx56leM5SRn7zonErmQ0lJybzV63MOR/1NuVAbI0a9TFHfrNvIe4O+ZsvGfZQo6ceI0a9gswWwetVvfD5+MZZlEViyOEOGPYstpATbfjvAiA9nk5KSQtGihXl3cBfCKt/kohrmbc7aLmKi4xnw9jTOnk3E29uT/oM7U7mK1sm1RP64k3GjFwPwctc23HfFdcbObUcYOvBbUlPSeLxzYzo91Yz09HT6dJ/M8T9O4uFheLRjIx7r1BiAIf1msu23KMe6GT3+RYJt/s6tlLi1nHYfSLUsKw6w/uX78qTUlDTGjV7EpKndmTy9JxPHLSE5OTVT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iGivYu868FQO3yciIiIiIiIiOWBZ1iDLsswVj0FXFCsBxF/2/MpRD+YBK4B9wO+WZR2/1nfmqFHAsqyTGa0QMZZljbYsa2dO3iciIiIiIiKSrxknPnLmNOB/2fMrpwsaB9yGPYMgyBjT6FofluMxBURERERERETE5X4FmhtjPI0xtwIHrliein08wHTsDQglrvVhOZ2SUERERERERKTAsUzempPQsqxTxphpwDogBXjOGNMa8LcsazYwFIgwxiQDx7B3JciWGgVERERERERE8hHLsiYCEy976eBly74Fvs3pZ6lRQERERERERCQ7HnkrU+BG05gCIiIiIiIiIgWUMgVEREREREREsuPeiQLKFBAREREREREpqJQpICIiIiIiIpKdPDb7wI2mTAERERERERGRAkqZAiIiIiIiIiLZ0ewDIiIiIiIiIuKOlCkgIiIiIiIikh33ThRQpoCIiIiIiIhIQaVGAREREREREZECSt0HRERERERERLKjKQlFRERERERExB0pU0BEREREREQkO8oUEBERERERERF3pEwBERERERERkey4+a10N6+eiIiIiIiIiGTHKZkC51NTnPE1kgM7d3V2dQiSoXatma4OQTJEH3rO1SFIhnQr2dUhyGW8TFFXhyAZUq2Lrg5BMlhWmqtDkAzJ6amuDkEKCo0pICIiIiIiIiLuSGMKiIiIiIiIiGTHvRMFlCkgIiIiIiIiUlApU0BEREREREQkG5aHe6cKKFNAREREREREpIBSpoCIiIiIiIhIdjT7gIiIiIiIiIi4I2UKiIiIiIiIiGTHvRMFlCkgIiIiIiIiUlCpUUBERERERESkgFL3AREREREREZHsaEpCEREREREREXFHyhQQERERERERyY6mJBQRERERERERd5TjRgFjzM3GmHuNXVBuBiUiIiIiIiKSJxgnPlwgR90HjDHvAnWAMOA2YDrQOhfjEhEREREREZFcltMxBe6zLKuZMWaNZVmWMcYnV6MSERERERERyQs0+4CdMaYIYBljCuGyxAYRERERERERuVFymikwGIgEKgGrgf65FpGIiIiIiIhIXuHmmQI5ahSwLGs10MAYE2RZVlwuxyQiIiIiIiIiTpCj7gPGmInGGGNZVlzG7AMTcjswEREREREREVezjPMerpDTMQWqWpZlAWT8rZp7IYmIiIiIiIiIM+R0TAFj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IiLZcfNb6W5ePRERERERERHJjjIFRERERERERLKjMQVERERERERExB0pU0BEREREREQkOx7unSnglEaB4MJlnfE1kgMX0xJcHYJkiD70nKtDkAwhYZNdHYJkOBXVzdUhyGV2x592dQiS4daSFV0dgmRIST/v6hAkg7dHsqtDEHEL6j4gIiIiIiIiUkCp+4CIiIiIiIhIdty8+4AyBUREREREREQKKGUKiIiIiIiIiGTD0pSEIiIiIiIiIuKOlCkgIiIiIiIikh03v5Xu5tUTERERERERkewoU0BEREREREQkOxpTQERERERERETckTIFRERERERERLLjoUwBEREREREREXFDyhQQERERERERyY4yBUREREREREQkrzDGvGSM+ckYE2mMqXzFsmLGmCnGmB+NMWuu91nKFBARERERERHJTh5LFDDGBALPAncBtwAfAI9fVmQgMNmyrPU5+TxlCoiIiIiIiIjkH3cAayzLSrMsazNQ5YrljYFOxpgIY0zX632YGgVEREREREREsmF5GKc9jDGDjDHWFY9BV4RUAoi/7PmVuQy3AguB+4BHjDE1rlU/NQqIiIiIiIiI5AGWZQ2yLMtc8Rh0RbHTgP9lz9OvWB4HrLIsKxVYDdS61neqUUBEREREREQk//gVaG6M8TTG3AocuGL5euxjDQDUBw5e68M00KCIiIiIiIhIdkzeGmnQsqxTxphpwDogBXjOGNMa8LcsazbwNvCFMaYIEGlZ1m/X+jw1CoiIiIiIiIjkI5ZlTQQmXvbSwcuWHcY+nkCOqFFAREREREREJDseeStT4EbTmAIiIiIiIiIiBZQyBURERERERESy496JAsoUEBERERERESmocpQpYIxZCXwNzLMsKyl3QxIRERERERHJGzzc/FZ6TrsPdAGeBn40xuwEvrIsa2PuhZX7kpKS6f3GWKIO/Ulo+RBGje5JUd/Cmcqkp6czaMAXbNq0h8BAP0aP7YnNFgjAurVb+XjEDCwLbm9Qg/4DnuXEiZN0f20kaenpAHTt9jh331Pf6XXLb5KSkunb+wsOR52gXGgww0e9SNGiWdfF0EHT2bJpP4GBxflo9EsE2wL4++9T9OvzJXv3HKXXWx14rGMzx2f2eO1Tdu04QofOzene8xFXVC1fiPhxO+NGLQDg5W7taNH6tkzLd2yLYuiAGaSkpNKhc3OeePpu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BFAOiMx4LiIiIiIiIiL5WI4yBSzLSgfm53IsIiIiIiIiInmKuw806OaJECIiIiIiIiKSnZyOKSAiIiIiIiJS4HgoU0BERERERERE3JEyBURERERERESyoTEFRERERERERMQtKVNAREREREREJBvKFBARERERERERt6RMAREREREREZFsGDdPFVCmgIiIiIiIiEgBpUwBERERERERkWwYN7+V7ubVExEREREREZHsKFNAREREREREJBtuPqSAMgVERERERERECio1CoiIiIiIiIgUUOo+ICIiIiIiIpINdR8QEREREREREbekTAERERERERGRbChTQERERERERETckjIFRERERERERLLh4eaZAk5pFEhMi3PG10gOGCWH5BnpVrKrQ5AMp6K6uToEyRBYaZyrQ5DLnDvaz9UhSIZzqX+5OgSRPOfVn7xdHYJkmN7M1RHI/4cyBURERERERESyoTEFRERERERERMQtKVNAREREREREJBvKFBARERERERERt6RMAREREREREZFsGDeffkCZAiIiIiIiIiIFlDIFRERERERERLKhMQVERERERERExC0pU0BEREREREQkG8oUEBERERERERG3pEYBERERERERkQJK3QdEREREREREsqHuAyIiIiIiIiLilpQpICIiIiIiIpINDzfPFMhRo4AxJgB4EAgEDIBlWaNyLywRERERERERyW05zRRYCiwH/sjFWERERERERETyFHcfUyCnjQLxlmUNzdVIRERERERERMSpctoocMAY8yKwBbAALMv6LdeiEhEREREREckDjJsPz5/TRgF/oGHGA+wNA8/mSkQiIiIiIiIi4hQ5ahSwLOu/AMaYIMuy4nI3JBEREREREZG8wd3HFMhRIoQxpp0xZjcw0xiz2xjzQC7HJSIiIiIiIiK5LKfdB/oBd1iWdc4YUxz4AViUe2GJiIiIiIiIuJ5x81SBnA6ZYIDzGf8+f62CIiIiIiIiIpI/5DRT4GvgF2PMNqAu8E2uRSQiIiIiIiKSR7h5okCOBxocb4yZC1QEDluWFZu7YYmIiIiIiIhIbrtmo4Ax5nHLsuYaY3phn4YQoLExBsuyRuV+eCIiIiIiIiKuU9AzBc5k/L1yGkLryoL5QcSP2xk3agEAL3drT4vWt2ZavmNbFEMHzCQlJZUOnZvxxNN3A3D0SDT9+kzh/Lkk7r6v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SUvw8vLEx8ebHr0ep/7t1dj4yx5GDJ+FwWA8DC+81J77Wuatm2XeHnnzhk9i4kX7lIRRfxIaWorRY97A17cIq1dvZveuQ3Tr3tE+Xee7E9m8aS+BgX6MHtuLkIwxBhYtXMvPP+3gg+FdM33uww/25kT0SdJS0ylWrAjzF47E3z9vZGB6edR1637X725Z5bTr2fduu8/pv2VOGwVmAUWAX4EGwEVgI4BlWaOu/zX5p1HA3eWVRgHJm40CBVV+aBQoKPJDo0BBkp8bBdxNXmwUKKjyYqNAQZVXGwUKIjUK3DiuaBTI6cgVl0+uuSAX4hARERERERERJ8tRo4BlWdOMMZ6AH2AyXtNcfSIiIiIiIuLW3H1KwpzOPvAB8BDwN/ZGAQu4J/fCEhEREREREZHcltPuA/dallX9+sVERERERERE3Ie7ZwrkdErCzcaYsFyNREREREREREScKqeZAnuArcaYf4autyzLqnOtN4iIiIiIiIjkd56uDiCX5bRR4Fkg2LKsi7kZjIiIiIiIiIg4T04bBbYBvoAaBURERERERKTA8DCWq0PIVTltFGgCHFH3ARERERERERH3kaNGAcuybs7tQERERERERETyGneffSBHjQLGGB/g/9q77/Coqq2P49+VSk8PiNIRlK6CjSJWQOyviqLivV7vtYENewPsFVAUsIMFBaVJERQRUEEBpYMgXSxJKAkEAmn7/WOGkJAERmVmksnvwzPPMOfsmVn7nJwy+6y9zyXA0YABOOcG+i8sEREREREREfE3X7sPfAosx9MwMAmo5a+ARERERERERMqKUM8UCPOxXA3n3ENAqnPufqCGH2MSERERERERkQDwNVMg2/u8y8wuADTGgIiIiIiIiIS8cGUKANDfzCoDfYFzgY/8F5KIiIiIiIiIBIKvjQJPOeeynHNrnHN3AGf5MygRERERERGRsiDMAvcISv18LBd50OtKRzoQEREREREREQksX8cUmGdmbwFfA52B7/0WkYiIiIiIiIgEhE+NAs65e82sO9AMGO+cm+rfsERERERERESCL8xcsEPwK18zBXDOTQGm+DEWEREREREREQkgnxsFRERERERERCqaYA0AGCi+DjQoIiIiIiIiIiFGmQIiIiIiIiIipQgPdgB+pkwBERERERERkQpKmQIiIiIiIiIipQj1MQUC0ijQZXpqIL5GfDD+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wMnAIW9pICIiIiIiIhIKwstYpsCRdshGAefcSAAzu9w5d6F38utmNtXvkYmIiIiIiIiIX/k0pgCQbGZtnHOLzawNoBuXioiIiIiISMgLs9AerN3XRoF/A0+b2fHAKu9rERERERERESnHfG0UaOR9bPc+NwRW+isoERERERERkbKgrN194EjztVFgANDBOZdhZjHA18Bk/4UlIiIiIiIiIv7ma6PARmCn9/87gV/9Eo2IiIiIiIhIGaJMAY8oYKGZLQROAlLM7BUA59zt/gpORERERERERPzH10aBFwr9f5Q/AhERERERERGRwPKpUcA5N9vfgYiIiIiIiIiUNWHBDsDPQr1+IiIiIiIiIlIKX7sPiIiIiIiIiFQ4FuIDDSpTQERERERERKSCUqaAiIiIiIiISClCPFFAmQIiIiIiIiIiFZUyBURERERERERKoTEFRERERERERCQkKVNAREREREREpBShfiU91OsnIiIiIiIiIqVQpoCIiIiIiIhIKcxcsEPwK2UKiIiIiIiIiFRQyhQQERERERERKUWI33xAmQIiIiIiIiIiFZUyBURERERERERKYSGeKhCQRoEr6+8OxNeID3KdkkPKCufygh2CeOXkax8lUpJ9eenBDkG8znrrtmCHIF4zb3wt2CGIV9SKnsEOQSQk6BeiiIiIiIiISAWl7gMiIiIiIiIipQjx3gPKFBARERERERGpqJQpICIiIiIiIlKKsBBPFVCmgIiIiIiIiEgFpUwBERERERERkVKEeKKAMgVEREREREREKiplCoiIiIiIiIiUwkI8VUCZAiIiIiIiIiIVlDIFREREREREREoR4okCyhQQERERERERqaiUKSAiIiIiIiJSCmUKiIiIiIiIiEhI8ilTwMwqO+eyzCwcOBP4wTm3y7+hiYiIiIiIiARXWIinCviaKfC59/kJ4ErgY/+EIyIiIiIiIiKB4mujQJ73+Wjn3P+Ayn6KR0RERERERKTMsAA+gsHXRgFnZoOBVX/xfSIiIiIiIiJSRvl694HLgROAWWZWCXjUfyGJiIiIiIiISCD42ihwlvf5Un8FIiIiIiIiIlLWmLlgh+BXvjYKtPQ+G9AWyATG+SUiEREREREREQkInxoFnHMDCr82s0/9E46IiIiIiIhI2RHidyT0rVHAzOILvawDNPFPOCIiIiIiIiISKL52HxjrfXbA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/pVfiPuA3UAOoOZzERERERERkXLOp+4DZvYBnkEHxwM3Oud+82tUIiIiIiIiImVAWEjnQfg+psBzzrllfo1ERERERERERALK1+4D0WY208zmm1mEmT3j16hEREREREREygAL4CMYfG0UGAhcCex2zuUCJ/svJBEREREREREJBF+7D+Q557aa2f5RFzWEvYiIiIiIiIS8Az+DQ5OvP+4XmNmLQLKZPQV878eYRERERERERCQADpspYGYGfATUBP4EVjrnpvo7MBEREREREZFgC/GbDxy+UcA558zsSedcd2BaAGISERERERERkQDwdUyBjWbWB0+3gTwA59xPfotKREREREREpAywEE8V8LVRoApwAtAB2O2ddoNfIhIRERERERGRgPB1oMFxQDugrvd5vN8iEhERERERESkjLICPYPA1U2AA0ME5l2FmMcDXwCT/hSUiIiIiIiIi/ubzmALATu//dwK/+iUaERERERERkTLE1/T68srXRoEoYKGZLQROAlLM7BUA59zt/gpORERERERERPzH10aBFwr9f5Q/AhEREREREREpa3T3AcA5N9vfgYiIiIiIiIhIYIV69wgRERERERERKYWv3QdEREREREREKqDQ7j+gTAERERERERGRCkqZAiIiIiIiIiKlMGUKiIiIiIiIiEgoUqaAiIiIiIiISCnMQvtaemjXTkRERERERERKpUwBERERERERkVKF9pgCAWkUSNurhISyIt/lBDsE8crOzw12COIVGZYd7BDE69a5kcEOQQoZ0bFqsEMQr0Gn/BrsEMQrakXPYIcgXsc3HxXsEMQra/OFwQ5B/gFlCoiIiIiIiIiUQncfEBEREREREZGQpEwBERERERERkVIpU0BEREREREREQpAyBURERERERERKYRba19JDu3YiIiIiIiIiUio1CoiIiIiIiIiUygL48DEis5vMbK6ZzTazxgfNa+ydPtfMbjrcZ6lRQERERERERKScMLN44AagI9AXeOagIs8CdwOdgBu85Ut1yDEFzOyy0uY558b5ErCIiIiIiIiIHDGnAF875/KAhWbW5KD5xzrnfgQws1nAycC00j7scAMNtiz0HAssANoCGYAaBURERERERCSkWQBvSWhm/YF+B00e4JzrX+h1HJBe+G0Hf0yh/+8A/n6mgHNugDewic65c7z/N+CzQ71PRERERERE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\n",
      "text/plain": [
       "<Figure size 1440x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "#visualizing the correlation between the different features (columns) in the encoded DataFrame. \n",
    "#The resulting heatmap can help identify which features are highly correlated with each other, which can be useful for feature selection and model building.\n",
    "     \n",
    "fig,ax= plt.subplots()\n",
    "fig.set_size_inches(20,10)\n",
    "sns.heatmap(tc, annot=True, cmap='YlGnBu')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4756d253",
   "metadata": {},
   "source": [
    "We can infer that duration of the call is highly correlated with the target variable. As the duration of the call is more, there are higher chances that the client is showing interest in the term deposit and hence there are higher chances that the client will subscribe to term deposit."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d27b065",
   "metadata": {},
   "source": [
    "# Model Building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "2971136c",
   "metadata": {},
   "outputs": [],
   "source": [
    "target = df_train['subscribed']\n",
    "train = df_train.drop('subscribed', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "f4d16958",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = df_train.drop(['education'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "9f88ce65",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = df_train.drop(['job',\t'marital',\t'default','housing',\t'loan',\t'contact','month','previous'], axis=1)\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "15bb0733",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = df_train.drop(['ID'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "8a924999",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>subscribed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>56</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>1933</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>19</td>\n",
       "      <td>nov</td>\n",
       "      <td>44</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>31</td>\n",
       "      <td>unknown</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>20</td>\n",
       "      <td>jul</td>\n",
       "      <td>91</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>27</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>891</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>18</td>\n",
       "      <td>jul</td>\n",
       "      <td>240</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>57</td>\n",
       "      <td>management</td>\n",
       "      <td>divorced</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>3287</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>22</td>\n",
       "      <td>jun</td>\n",
       "      <td>867</td>\n",
       "      <td>1</td>\n",
       "      <td>84</td>\n",
       "      <td>3</td>\n",
       "      <td>success</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>31</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>119</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>4</td>\n",
       "      <td>feb</td>\n",
       "      <td>380</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31642</th>\n",
       "      <td>29</td>\n",
       "      <td>management</td>\n",
       "      <td>single</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>12</td>\n",
       "      <td>may</td>\n",
       "      <td>116</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31643</th>\n",
       "      <td>53</td>\n",
       "      <td>management</td>\n",
       "      <td>divorced</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>380</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>cellular</td>\n",
       "      <td>5</td>\n",
       "      <td>jun</td>\n",
       "      <td>438</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31644</th>\n",
       "      <td>32</td>\n",
       "      <td>management</td>\n",
       "      <td>single</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>312</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>7</td>\n",
       "      <td>aug</td>\n",
       "      <td>37</td>\n",
       "      <td>3</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31645</th>\n",
       "      <td>57</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>225</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>15</td>\n",
       "      <td>may</td>\n",
       "      <td>22</td>\n",
       "      <td>7</td>\n",
       "      <td>337</td>\n",
       "      <td>12</td>\n",
       "      <td>failure</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31646</th>\n",
       "      <td>55</td>\n",
       "      <td>management</td>\n",
       "      <td>divorced</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>204</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>11</td>\n",
       "      <td>jul</td>\n",
       "      <td>1973</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>31647 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       age         job   marital  education default  balance housing loan  \\\n",
       "0       56      admin.   married    unknown      no     1933      no   no   \n",
       "1       31     unknown   married  secondary      no        3      no   no   \n",
       "2       27    services   married  secondary      no      891     yes   no   \n",
       "3       57  management  divorced   tertiary      no     3287      no   no   \n",
       "4       31  technician   married  secondary      no      119     yes   no   \n",
       "...    ...         ...       ...        ...     ...      ...     ...  ...   \n",
       "31642   29  management    single   tertiary      no        0     yes   no   \n",
       "31643   53  management  divorced   tertiary      no      380      no  yes   \n",
       "31644   32  management    single   tertiary      no      312      no   no   \n",
       "31645   57  technician   married  secondary      no      225     yes   no   \n",
       "31646   55  management  divorced  secondary      no      204     yes   no   \n",
       "\n",
       "         contact  day month  duration  campaign  pdays  previous poutcome  \\\n",
       "0      telephone   19   nov        44         2     -1         0  unknown   \n",
       "1       cellular   20   jul        91         2     -1         0  unknown   \n",
       "2       cellular   18   jul       240         1     -1         0  unknown   \n",
       "3       cellular   22   jun       867         1     84         3  success   \n",
       "4       cellular    4   feb       380         1     -1         0  unknown   \n",
       "...          ...  ...   ...       ...       ...    ...       ...      ...   \n",
       "31642   cellular   12   may       116         2     -1         0  unknown   \n",
       "31643   cellular    5   jun       438         2     -1         0  unknown   \n",
       "31644   cellular    7   aug        37         3     -1         0  unknown   \n",
       "31645  telephone   15   may        22         7    337        12  failure   \n",
       "31646   cellular   11   jul      1973         2     -1         0  unknown   \n",
       "\n",
       "       subscribed  \n",
       "0               0  \n",
       "1               0  \n",
       "2               0  \n",
       "3               1  \n",
       "4               0  \n",
       "...           ...  \n",
       "31642           0  \n",
       "31643           1  \n",
       "31644           0  \n",
       "31645           0  \n",
       "31646           1  \n",
       "\n",
       "[31647 rows x 17 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "671b7802",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>balance</th>\n",
       "      <th>day</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>subscribed</th>\n",
       "      <th>job_admin.</th>\n",
       "      <th>job_blue-collar</th>\n",
       "      <th>...</th>\n",
       "      <th>month_jun</th>\n",
       "      <th>month_mar</th>\n",
       "      <th>month_may</th>\n",
       "      <th>month_nov</th>\n",
       "      <th>month_oct</th>\n",
       "      <th>month_sep</th>\n",
       "      <th>poutcome_failure</th>\n",
       "      <th>poutcome_other</th>\n",
       "      <th>poutcome_success</th>\n",
       "      <th>poutcome_unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>56</td>\n",
       "      <td>1933</td>\n",
       "      <td>19</td>\n",
       "      <td>44</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>31</td>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>91</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>27</td>\n",
       "      <td>891</td>\n",
       "      <td>18</td>\n",
       "      <td>240</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>57</td>\n",
       "      <td>3287</td>\n",
       "      <td>22</td>\n",
       "      <td>867</td>\n",
       "      <td>1</td>\n",
       "      <td>84</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>31</td>\n",
       "      <td>119</td>\n",
       "      <td>4</td>\n",
       "      <td>380</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 52 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  balance  day  duration  campaign  pdays  previous  subscribed  \\\n",
       "0   56     1933   19        44         2     -1         0           0   \n",
       "1   31        3   20        91         2     -1         0           0   \n",
       "2   27      891   18       240         1     -1         0           0   \n",
       "3   57     3287   22       867         1     84         3           1   \n",
       "4   31      119    4       380         1     -1         0           0   \n",
       "\n",
       "   job_admin.  job_blue-collar  ...  month_jun  month_mar  month_may  \\\n",
       "0           1                0  ...          0          0          0   \n",
       "1           0                0  ...          0          0          0   \n",
       "2           0                0  ...          0          0          0   \n",
       "3           0                0  ...          1          0          0   \n",
       "4           0                0  ...          0          0          0   \n",
       "\n",
       "   month_nov  month_oct  month_sep  poutcome_failure  poutcome_other  \\\n",
       "0          1          0          0                 0               0   \n",
       "1          0          0          0                 0               0   \n",
       "2          0          0          0                 0               0   \n",
       "3          0          0          0                 0               0   \n",
       "4          0          0          0                 0               0   \n",
       "\n",
       "   poutcome_success  poutcome_unknown  \n",
       "0                 0                 1  \n",
       "1                 0                 1  \n",
       "2                 0                 1  \n",
       "3                 1                 0  \n",
       "4                 0                 1  \n",
       "\n",
       "[5 rows x 52 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#generating dummy values on the train dataset\n",
    "train = pd.get_dummies(train)\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "36c5017d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "#Splitting the data into train and validation set such as to validate the results of our model on the validation set. \n",
    "#keeping 20% of the dataset as our validation set and the rest as our training set.\n",
    "     \n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_val, y_train, y_val = train_test_split(train, target, test_size=0.2, random_state=12)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "8b12147f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "age                    int64\n",
      "balance                int64\n",
      "day                    int64\n",
      "duration               int64\n",
      "campaign               int64\n",
      "pdays                  int64\n",
      "previous               int64\n",
      "subscribed             int64\n",
      "job_admin.             uint8\n",
      "job_blue-collar        uint8\n",
      "job_entrepreneur       uint8\n",
      "job_housemaid          uint8\n",
      "job_management         uint8\n",
      "job_retired            uint8\n",
      "job_self-employed      uint8\n",
      "job_services           uint8\n",
      "job_student            uint8\n",
      "job_technician         uint8\n",
      "job_unemployed         uint8\n",
      "job_unknown            uint8\n",
      "marital_divorced       uint8\n",
      "marital_married        uint8\n",
      "marital_single         uint8\n",
      "education_primary      uint8\n",
      "education_secondary    uint8\n",
      "education_tertiary     uint8\n",
      "education_unknown      uint8\n",
      "default_no             uint8\n",
      "default_yes            uint8\n",
      "housing_no             uint8\n",
      "housing_yes            uint8\n",
      "loan_no                uint8\n",
      "loan_yes               uint8\n",
      "contact_cellular       uint8\n",
      "contact_telephone      uint8\n",
      "contact_unknown        uint8\n",
      "month_apr              uint8\n",
      "month_aug              uint8\n",
      "month_dec              uint8\n",
      "month_feb              uint8\n",
      "month_jan              uint8\n",
      "month_jul              uint8\n",
      "month_jun              uint8\n",
      "month_mar              uint8\n",
      "month_may              uint8\n",
      "month_nov              uint8\n",
      "month_oct              uint8\n",
      "month_sep              uint8\n",
      "poutcome_failure       uint8\n",
      "poutcome_other         uint8\n",
      "poutcome_success       uint8\n",
      "poutcome_unknown       uint8\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(X_train.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "2fc19ca3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "int64\n"
     ]
    }
   ],
   "source": [
    "print(y_train.dtypes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "12ebfe3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "age                    int64\n",
      "balance                int64\n",
      "day                    int64\n",
      "duration               int64\n",
      "campaign               int64\n",
      "pdays                  int64\n",
      "previous               int64\n",
      "subscribed             int64\n",
      "job_admin.             uint8\n",
      "job_blue-collar        uint8\n",
      "job_entrepreneur       uint8\n",
      "job_housemaid          uint8\n",
      "job_management         uint8\n",
      "job_retired            uint8\n",
      "job_self-employed      uint8\n",
      "job_services           uint8\n",
      "job_student            uint8\n",
      "job_technician         uint8\n",
      "job_unemployed         uint8\n",
      "job_unknown            uint8\n",
      "marital_divorced       uint8\n",
      "marital_married        uint8\n",
      "marital_single         uint8\n",
      "education_primary      uint8\n",
      "education_secondary    uint8\n",
      "education_tertiary     uint8\n",
      "education_unknown      uint8\n",
      "default_no             uint8\n",
      "default_yes            uint8\n",
      "housing_no             uint8\n",
      "housing_yes            uint8\n",
      "loan_no                uint8\n",
      "loan_yes               uint8\n",
      "contact_cellular       uint8\n",
      "contact_telephone      uint8\n",
      "contact_unknown        uint8\n",
      "month_apr              uint8\n",
      "month_aug              uint8\n",
      "month_dec              uint8\n",
      "month_feb              uint8\n",
      "month_jan              uint8\n",
      "month_jul              uint8\n",
      "month_jun              uint8\n",
      "month_mar              uint8\n",
      "month_may              uint8\n",
      "month_nov              uint8\n",
      "month_oct              uint8\n",
      "month_sep              uint8\n",
      "poutcome_failure       uint8\n",
      "poutcome_other         uint8\n",
      "poutcome_success       uint8\n",
      "poutcome_unknown       uint8\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(X_val.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a4bcbcf",
   "metadata": {},
   "source": [
    "Now our data is ready and it's time to build our model and check its performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "a90d56a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12:05:50] WARNING: C:/Users/Administrator/workspace/xgboost-win64_release_1.6.0/src/learner.cc:627: \n",
      "Parameters: { \"silent\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "Accuracy: 1.0\n",
      "Classification report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      5608\n",
      "           1       1.00      1.00      1.00       722\n",
      "\n",
      "    accuracy                           1.00      6330\n",
      "   macro avg       1.00      1.00      1.00      6330\n",
      "weighted avg       1.00      1.00      1.00      6330\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Train the XGBoost model\n",
    "import xgboost as xgb\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "\n",
    "params = {\n",
    "    'objective': 'binary:logistic',\n",
    "    'max_depth': 3,\n",
    "    'learning_rate': 0.1,\n",
    "    'silent': 1.0,\n",
    "    'n_estimators': 100\n",
    "}\n",
    "\n",
    "modelxgb = xgb.XGBClassifier(**params)\n",
    "modelxgb.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions on the testing data\n",
    "y_pred = modelxgb.predict(X_val)\n",
    "\n",
    "# Evaluate the model performance\n",
    "accuracy = accuracy_score(y_val, y_pred)\n",
    "report = classification_report(y_val, y_pred)\n",
    "\n",
    "# Display the evaluation results\n",
    "print('Accuracy:', accuracy)\n",
    "print('Classification report:')\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93eb0f70",
   "metadata": {},
   "source": [
    "# Ensemble Models: Random Forest, Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "1a3c37e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "import pandas as pd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "ac724bc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "5c1075b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating an object of Decision tree\n",
    "clf = DecisionTreeClassifier(max_depth=4, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "4095fca3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=4, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=4, random_state=0)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(max_depth=4, random_state=0)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting the model\n",
    "clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "912e6c24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, ..., 1, 0, 0], dtype=int64)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#making predictions on the validation set\n",
    "predict = clf.predict(X_val)\n",
    "predict\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "80183dc0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 1.0\n",
      "Classification report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      5608\n",
      "           1       1.00      1.00      1.00       722\n",
      "\n",
      "    accuracy                           1.00      6330\n",
      "   macro avg       1.00      1.00      1.00      6330\n",
      "weighted avg       1.00      1.00      1.00      6330\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Calculating the accuracy\n",
    "dt_score=accuracy_score(y_val,predict)\n",
    "report = classification_report(y_val, predict)\n",
    "print('Accuracy:', dt_score)\n",
    "print('Classification report:')\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9607e8e",
   "metadata": {},
   "source": [
    "Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "0b851560",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "ae1df78c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a random forest classifier with 100 trees\n",
    "rfc = RandomForestClassifier(n_estimators=100, random_state=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "579d16c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=0)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(random_state=0)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit the model on the training data\n",
    "rfc.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "e11bdaaa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, ..., 1, 0, 0], dtype=int64)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Make predictions on the testing data\n",
    "predict1 = rfc.predict(X_val)\n",
    "predict1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "ea0031f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 1.0\n",
      "Classification report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      5608\n",
      "           1       1.00      1.00      1.00       722\n",
      "\n",
      "    accuracy                           1.00      6330\n",
      "   macro avg       1.00      1.00      1.00      6330\n",
      "weighted avg       1.00      1.00      1.00      6330\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Calculating the accuracy\n",
    "rf_score=accuracy_score(y_val,predict1)\n",
    "report = classification_report(y_val, predict1)\n",
    "print('Accuracy:', rf_score)\n",
    "print('Classification report:')\n",
    "print(report)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "533be70c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>XGBoost</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Model  Accuracy Score\n",
       "0        XGBoost           100.0\n",
       "1  Decision Tree           100.0\n",
       "2  Random Forest           100.0"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modellists = []\n",
    "modellists.append(['XGBoost', accuracy * 100])\n",
    "modellists.append(['Decision Tree', dt_score * 100])\n",
    "modellists.append(['Random Forest', rf_score * 100])\n",
    "\n",
    "\n",
    "model_df = pd.DataFrame(modellists, columns = ['Model', 'Accuracy Score'])\n",
    "model_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ada4442",
   "metadata": {},
   "source": [
    "# Basic Models\n",
    "\n",
    "#### Logistic Regression Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "2136bb32",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "43eb0638",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating an object of logistic regression model\n",
    "lreg = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "d11f4acb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anumy\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting the data into the model\n",
    "lreg.fit(X_train,y_train)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "63e3ce82",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Making predictions on the validation set\n",
    "pred = lreg.predict(X_val)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "5fd33a71",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9434439178515008\n",
      "Classification report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.99      0.97      5608\n",
      "           1       0.85      0.61      0.71       722\n",
      "\n",
      "    accuracy                           0.94      6330\n",
      "   macro avg       0.90      0.80      0.84      6330\n",
      "weighted avg       0.94      0.94      0.94      6330\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Calculating the accuracy score\n",
    "lr_score=accuracy_score(y_val,pred)\n",
    "report = classification_report(y_val, pred)\n",
    "print('Accuracy:', lr_score)\n",
    "print('Classification report:')\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "216871bb",
   "metadata": {},
   "source": [
    "# KNN Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "825bcc32",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "2d8642b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating an object of KNN Classifier\n",
    "knn5 = KNeighborsClassifier(n_neighbors = 5)\n",
    "knn1 = KNeighborsClassifier(n_neighbors=1)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "ebfab302",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=1)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=1)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting the data into the model\n",
    "knn5.fit(X_train, y_train)\n",
    "knn1.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "53703fd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Making predictions on the validation set\n",
    "y_pred_5 = knn5.predict(X_val)\n",
    "y_pred_1 = knn1.predict(X_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "f3e6cf07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy5: 0.8843601895734597\n",
      "Classification report5:               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.96      0.94      5608\n",
      "           1       0.49      0.27      0.35       722\n",
      "\n",
      "    accuracy                           0.88      6330\n",
      "   macro avg       0.70      0.62      0.64      6330\n",
      "weighted avg       0.86      0.88      0.87      6330\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Calculating the accuracy score\n",
    "knn_score5 = accuracy_score(y_val, y_pred_5)\n",
    "report5 = classification_report(y_val, y_pred_5)\n",
    "print('Accuracy5:', knn_score5)\n",
    "print('Classification report5:', report5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b49971e0",
   "metadata": {},
   "source": [
    "# Support vector Classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "a66e284e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "d74ca875",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating an object of SVC\n",
    "svc_model = SVC(kernel = 'rbf', gamma = 'scale')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "5b08c129",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SVC()"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting the data into the model\n",
    "svc_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "db29f1c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Making predictions on the validation set\n",
    "predictSVC = svc_model.predict(X_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "b76a8ff9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.885781990521327\n",
      "Classification report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      1.00      0.94      5608\n",
      "           1       0.47      0.01      0.02       722\n",
      "\n",
      "    accuracy                           0.89      6330\n",
      "   macro avg       0.68      0.50      0.48      6330\n",
      "weighted avg       0.84      0.89      0.83      6330\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Calculating the accuracy score\n",
    "svm_score = accuracy_score(y_val,predictSVC)\n",
    "report1 = classification_report(y_val, predictSVC)\n",
    "print('Accuracy:', svm_score)\n",
    "print('Classification report:')\n",
    "print(report1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c222ef5d",
   "metadata": {},
   "source": [
    "Gaussian Naive Bayes Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "681f3918",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "a57de166",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating an object\n",
    "nb = GaussianNB()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "4ee51c84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "GaussianNB()"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting the data into the model\n",
    "nb.fit(X_train, y_train)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "c86d6828",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Making predictions on the validation set\n",
    "predictNB = nb.predict(X_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "04569d77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9987361769352291\n",
      "Classification report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      5608\n",
      "           1       0.99      1.00      0.99       722\n",
      "\n",
      "    accuracy                           1.00      6330\n",
      "   macro avg       1.00      1.00      1.00      6330\n",
      "weighted avg       1.00      1.00      1.00      6330\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Calculating the accuracy score\n",
    "gnb_score = accuracy_score(y_val,predictNB)\n",
    "reportnb = classification_report(y_val, predictNB)\n",
    "print('Accuracy:', gnb_score)\n",
    "print('Classification report:')\n",
    "print(reportnb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ccfd872",
   "metadata": {},
   "source": [
    "Result of Standard Classification Models (in increasing order of Accuracy Score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "fdd3a89d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Gaussian Naive Bayes</td>\n",
       "      <td>99.873618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>K-Nearest Neighbour</td>\n",
       "      <td>88.436019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Support Vector Classification</td>\n",
       "      <td>88.578199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>94.344392</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Model  Accuracy Score\n",
       "0           Gaussian Naive Bayes       99.873618\n",
       "1            K-Nearest Neighbour       88.436019\n",
       "2  Support Vector Classification       88.578199\n",
       "3            Logistic Regression       94.344392"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mdellists = []\n",
    "mdellists.append(['Gaussian Naive Bayes', gnb_score * 100])\n",
    "mdellists.append(['K-Nearest Neighbour', knn_score5 * 100])\n",
    "mdellists.append(['Support Vector Classification', svm_score * 100])\n",
    "mdellists.append(['Logistic Regression', lr_score * 100])\n",
    "\n",
    "mdel_df = pd.DataFrame(mdellists, columns = ['Model', 'Accuracy Score'])\n",
    "mdel_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66b6afae",
   "metadata": {},
   "source": [
    "Compare performances of all the models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "07000b6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Gaussian Naive Bayes</td>\n",
       "      <td>99.873618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>K-Nearest Neighbour</td>\n",
       "      <td>88.436019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Support Vector Classification</td>\n",
       "      <td>88.578199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>94.344392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>XGBoost</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Model  Accuracy Score\n",
       "0           Gaussian Naive Bayes       99.873618\n",
       "1            K-Nearest Neighbour       88.436019\n",
       "2  Support Vector Classification       88.578199\n",
       "3            Logistic Regression       94.344392\n",
       "4                        XGBoost      100.000000\n",
       "5                  Decision Tree      100.000000\n",
       "6                  Random Forest      100.000000"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mdelists = []\n",
    "mdelists.append(['Gaussian Naive Bayes', gnb_score * 100])\n",
    "mdelists.append(['K-Nearest Neighbour', knn_score5 * 100])\n",
    "mdelists.append(['Support Vector Classification', svm_score * 100])\n",
    "mdelists.append(['Logistic Regression', lr_score * 100])\n",
    "mdelists.append(['XGBoost', accuracy * 100])\n",
    "mdelists.append(['Decision Tree', dt_score * 100])\n",
    "mdelists.append(['Random Forest', rf_score * 100])\n",
    "\n",
    "mdl_df = pd.DataFrame(mdelists, columns = ['Model', 'Accuracy Score'])\n",
    "mdl_df\n",
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be3f1ada",
   "metadata": {},
   "source": [
    "Graphical Representation of Classification Model vs. Accuracy Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "81a0549c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Comparison of Classification Models')"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (25, 10))\n",
    "sns.barplot(x = mdl_df['Model'], y = mdl_df['Accuracy Score'], data = mdl_df)\n",
    "plt.xlabel('Model', fontsize = 15)\n",
    "plt.ylabel('Accuracy Score', fontsize = 15)\n",
    "plt.title('Comparison of Classification Models', fontsize = 15)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cb24e01",
   "metadata": {},
   "source": [
    "max voting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "fdd8ea28",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anumy\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12:34:58] WARNING: C:/Users/Administrator/workspace/xgboost-win64_release_1.6.0/src/learner.cc:627: \n",
      "Parameters: { \"silent\" } might not be used.\n",
      "\n",
      "  This could be a false alarm, with some parameters getting used by language bindings but\n",
      "  then being mistakenly passed down to XGBoost core, or some parameter actually being used\n",
      "  but getting flagged wrongly here. Please open an issue if you find any such cases.\n",
      "\n",
      "\n",
      "Accuracy: 0.999526066350711\n",
      "Classification report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      5608\n",
      "           1       1.00      1.00      1.00       722\n",
      "\n",
      "    accuracy                           1.00      6330\n",
      "   macro avg       1.00      1.00      1.00      6330\n",
      "weighted avg       1.00      1.00      1.00      6330\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import VotingClassifier\n",
    "\n",
    "voting_clf = VotingClassifier(\n",
    "    estimators=[('Naive Bayes', nb), ('Logistic',lreg), ('KNN', knn5),('SVM', svc_model), ('Decision tree', clf), ('Random Forest', rfc), ('XG Boost', modelxgb)],\n",
    "    voting='hard')\n",
    "\n",
    "voting_clf.fit(X_train, y_train)\n",
    "y_pred = voting_clf.predict(X_val)\n",
    "\n",
    "accuracymax = accuracy_score(y_val, y_pred)\n",
    "print('Accuracy:', accuracymax)\n",
    "reportmax = classification_report(y_val, y_pred)\n",
    "print('Classification report:')\n",
    "print(reportmax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38dfc071",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
